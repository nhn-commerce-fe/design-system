{"version":3,"file":"components-button-Button-stories.3a00d20e9baf900598d1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAkBA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAcA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAOA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA1CA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://ui/./src/components/button/Button.tsx"],"sourcesContent":["import { type ComponentProps, createElement, forwardRef } from 'react';\nimport classnames from 'classnames';\nimport { SvgIcon } from '../svg/SvgIcon';\nimport { IconName } from '../svg/const';\n\nexport type ButtonTheme =\n  | 'primary'\n  | 'tertiary-gray'\n  | 'secondary-color'\n  | 'secondary-gray'\n  | 'tertiary-color'\n  | 'link-gray'\n  | 'link-color';\nexport type ButtonSize = 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\ninterface ButtonBaseProps extends Omit<ComponentProps<'button'>, 'ref'> {\n  href?: string;\n  target?: '_self' | '_blank';\n}\n\nconst ComponentBase = forwardRef<HTMLButtonElement | HTMLAnchorElement, ButtonBaseProps>(\n  ({ href, children, ...props }, ref) => {\n    const BaseComponent = href ? 'a' : 'button';\n    return createElement(BaseComponent, { href, ref, ...props }, children);\n  }\n);\n\nexport interface ButtonProps extends ButtonBaseProps {\n  label: string;\n  className?: string;\n  fullSized?: boolean;\n  hierarchy?: ButtonTheme;\n  disabled?: boolean;\n  leadingIcon?: IconName | null;\n  trailingIcon?: IconName;\n  onlyIcon?: boolean;\n  size?: ButtonSize;\n}\n\nexport const Button = forwardRef<HTMLButtonElement | HTMLAnchorElement, ButtonProps>(\n  (\n    {\n      leadingIcon = '',\n      trailingIcon,\n      onlyIcon = false,\n      href,\n      label,\n      hierarchy,\n      disabled,\n      className = '',\n      fullSized,\n      size = 'lg',\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const iconSize = ['sm', 'md'].includes(size) ? 20 : 24;\n    return (\n      <ComponentBase\n        href={href}\n        className={classnames(\n          'btn',\n          `btn--${size}`,\n          hierarchy && `btn--${hierarchy}`,\n          fullSized && 'is-full',\n          disabled && 'is-disable',\n          className\n        )}\n        {...props}\n        ref={ref}\n      >\n        <>\n          {leadingIcon && <SvgIcon icon={leadingIcon} size={iconSize} />}\n          {onlyIcon ? <span className=\"a11y\">{label}</span> : <span className=\"btn__label\">{label}</span>}\n          {trailingIcon && <SvgIcon icon={trailingIcon} size={iconSize} />}\n          {children && children}\n        </>\n      </ComponentBase>\n    );\n  }\n);\n"],"names":[],"sourceRoot":""}