{"version":3,"file":"components-badge-Badge-stories.9bfb7df3b2fc223f472f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;;AAEA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AA7CA;AAAA;AAAA","sources":["webpack://ui/./src/components/badge/Badge.tsx"],"sourcesContent":["import classnames from 'classnames';\nimport { COLOR } from '../../../constant/color';\nimport { Size } from '../../../constant/size';\nimport { SvgIcon } from '../svg/SvgIcon';\n\n// TODO: modern type 추가 하기\n\ntype BadgeColor = 'gray' | 'error' | 'warning' | 'success' | 'pink' | 'info' | 'yellow' | 'violet';\n\ninterface BadgeProps {\n  className?: string;\n  color?: BadgeColor;\n  label: string;\n  type?: 'pill' | 'badge';\n  onlyOutline?: boolean;\n  size?: Omit<Size, 'xl' | '2xl'>;\n  icon?: 'dot' | 'x' | 'arrowRight' | false;\n}\n\nconst BADGE_COLOR: { [key: string]: 'blue' | 'green' | 'orange' | 'red' } = {\n  info: 'blue',\n  success: 'green',\n  warning: 'orange',\n  error: 'red',\n};\n\nexport const Badge = ({\n  icon,\n  size = 'md',\n  type = 'pill',\n  onlyOutline = false,\n  className,\n  color = 'violet',\n  label,\n}: BadgeProps) => {\n  const svgColor = `${BADGE_COLOR[color] || color}600` as keyof typeof COLOR;\n\n  return (\n    <span\n      className={classnames(\n        'badge',\n        `badge--${color}`,\n        `badge--${size}`,\n        `badge--${type}`,\n        onlyOutline ? `badge--outline` : '',\n        icon === 'dot' ? 'badge--dot' : '',\n        label,\n        className\n      )}\n    >\n      <span className=\"badge__label\">{label}</span>\n      {icon === 'x' && <SvgIcon icon=\"xClose\" size={16} color={svgColor} />}\n      {icon === 'arrowRight' && <SvgIcon icon=\"arrowRight\" size={16} color={svgColor} />}\n    </span>\n  );\n};\n\ninterface BadgeGroupProps extends Omit<BadgeProps, 'size'> {\n  href?: string;\n  size?: Omit<Size, 'sm'>;\n  leading?: Omit<BadgeProps, 'className' | 'size' | 'color' | 'type'>;\n  trailing?: {\n    href: string;\n    label: string;\n  };\n}\n\nexport const BadgeGroup = ({\n  href,\n  leading,\n  color = 'violet',\n  type = 'pill',\n  trailing,\n  size = 'md',\n  label,\n  className,\n  ...props\n}: BadgeGroupProps) => {\n  return (\n    <span\n      className={classnames(\n        'badge-group',\n        `badge-group--${color}`,\n        `badge-group--${type}`,\n        `badge-group--${size}`,\n        className\n      )}\n      {...props}\n    >\n      {leading && (\n        <Badge\n          label={leading.label}\n          type={type}\n          size=\"sm\"\n          color={color}\n          icon={leading.icon}\n          onlyOutline={leading.onlyOutline}\n        />\n      )}\n      {!trailing && (\n        <a className=\"badge-group__link\" href={href}>\n          <span>{label} </span>\n          <SvgIcon icon=\"arrowRight\" size={16} color={`${BADGE_COLOR[color] || color}600` as keyof typeof COLOR} />\n        </a>\n      )}\n      {trailing && (\n        <a href={trailing.href}>\n          <Badge label={trailing.label} type={type} size=\"sm\" color={color} icon=\"arrowRight\" />\n        </a>\n      )}\n    </span>\n  );\n};\n"],"names":[],"sourceRoot":""}